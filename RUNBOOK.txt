Nebula Chat ‚Äî Setup & Runbook

Note
- Some sections below document an expanded version (accounts, rooms, uploads, ngrok helpers).
- The current codebase is a minimal chat; use only the parts that match the files you see.

Summary of what was done
- Installed Node.js via NVM and verified npm availability (Node v22.20.0, npm v10.9.3).
- Installed project dependencies in chatroom using: npm ci --omit=dev
- Started the chat server in the background:
  - Command: HOST=0.0.0.0 PORT=3000 node server.js
  - PID file: /tmp/nebula-chat.pid
  - Logs: /tmp/nebula-chat.log
- Installed ngrok (v3) and saved your authtoken to ~/.config/ngrok/ngrok.yml.
- Started an ngrok HTTP tunnel to port 3000 in the background:
  - PID file: /tmp/ngrok.pid
  - Public URL (current session): https://d9a26549a260.ngrok-free.app
- Local (LAN) URL: http://192.168.0.45:3000

New features (accounts, rooms, uploads, UI)
- Accounts: sign in with any username. Admin username is "admin" (password configurable via ADMIN_PASSWORD).
- Rooms: "general" (everyone can post) and "announcements" (only admin can post; everyone can read).
- Uploads: PNG, JPG and PDF up to 8MB. Files are stored under chatroom/uploads and served at /uploads/<file>.
- UI: simplified, 2010-ish theme; tabs for rooms; attach button next to composer.
- Direct Messages: click a user on the left to open a DM tab; the recipient gets a DM tab automatically. DMs and room messages persist across restarts.
- Quality of life: logout button, role label, unread badges on tabs, DM typing indicators, error hints in login.
- Profile pictures: users can upload a PNG/JPG avatar from the sidebar; avatars show in messages and the online list and persist across restarts.
- Settings: change password for member accounts (not admin/guest) from Settings in the sidebar.
- Editing & Pins: edit your own messages (admin can edit any). Admins can pin/unpin room messages; pins persist.
 - Reactions: add/toggle quick reactions (üëç‚ù§Ô∏èüòÇüòÆüò¢) on messages in rooms and DMs; counts update live and persist.

Manual usage ‚Äî step by step
1) Start the chat server
   - cd chatroom
   - Ensure Node is on PATH (if using NVM in a new shell):
     export NVM_DIR="$HOME/.nvm"; . "$NVM_DIR/nvm.sh"
   - First time deps (or after updates): npm install
   - Run the server:
     HOST=0.0.0.0 PORT=3000 node server.js
   - Open in a browser: http://localhost:3000 (or your LAN IP on other devices)

2) Start ngrok (to expose it publicly)
   - One-time (if token isn‚Äôt set yet): ngrok config add-authtoken <YOUR_TOKEN>
   - Start tunnel: ngrok http 3000
   - Copy the printed https URL (or visit http://127.0.0.1:4040 for the local ngrok UI)

Recommended order
- Start the Node server first, then start ngrok. If ngrok is started before the server, the URL will work once the server is up (may show 502 until then).

Stopping processes (if started in background with PID files)
- Stop server: kill $(cat /tmp/nebula-chat.pid)
- Stop ngrok:  kill $(cat /tmp/ngrok.pid)

Logs
- Server logs: /tmp/nebula-chat.log
- ngrok logs:  /tmp/ngrok.log

One-line start (server + ngrok)
- From the project folder:
  - npm run up
- Options:
  - npm run up -- --port 3000 --host 0.0.0.0
  - npm run up -- --no-ngrok   (start only the local server)
- Behavior:
  - Starts the server if it‚Äôs not already running.
  - Starts ngrok and prints the public URL once available.
  - Ctrl+C stops both (if the script started them).

One-line stop
- From the project folder:
  - npm run down
- This stops both ngrok and the chat server (uses PID files / process names).

Sign in / Admin
- Open the site, you‚Äôll see a Sign in modal. Enter any username and click Continue.
- For admin, use username: admin and your configured admin password (see below).
- Your session is stored in a cookie; after signing in, the socket identifies you as that user.

Admin password
- Set via environment variable: ADMIN_PASSWORD
- Examples:
  - Temporary: ADMIN_PASSWORD="yourStrongPass" npm run up
  - With CLI: npm run up -- --admin-pass "yourStrongPass"
  - systemd/pm2: set ADMIN_PASSWORD in the service env.

Rooms
- Switch via the tabs. In #announcements, only admin can post; others see a hint and disabled composer.

Sending files
- Click Attach to upload a PNG, JPG or PDF (<= 8MB). The server validates type/size and broadcasts the attachment message to the current room.
 - In a DM, attachments are supported too; they appear only in that DM thread and persist.

Profile pictures
- Click ‚ÄúChange avatar‚Äù in the sidebar to upload a PNG/JPG (<= 4MB). Your avatar updates immediately and is persisted.

Settings
- Click ‚ÄúSettings‚Äù in the sidebar to change your password (member accounts only).

Direct messages
- Open: click a username in the left sidebar. A tab "@name" appears; the other user gets the tab too.
- Close: click the √ó on the DM tab. This leaves the DM room on your side; messages still arrive when you re-open.
- Persist: room and DM histories are stored under chatroom/data (JSONL files) and loaded on restart.
 - Edit/delete: You can edit or delete your own messages in DMs; admin has full rights.

Presentation material
- See PRESENTATION.txt for a step-by-step demo outline and a deeper technical walkthrough.
 - See BEGINNERS_GUIDE.txt for a plain-English guide with definitions for non‚Äëtechnical readers.

About npm being ‚Äúalready installed‚Äù
- The project already had node_modules, but initially the current shell couldn‚Äôt find node/npm on PATH. Installing/using NVM ensures node and npm are available. In new terminals, load NVM before running commands:
  export NVM_DIR="$HOME/.nvm"; . "$NVM_DIR/nvm.sh"
  (You can add that to ~/.bashrc or ~/.zshrc so it‚Äôs automatic.)

Notes
- Free ngrok URLs change each time you restart ngrok. For a static subdomain, use an ngrok plan that supports it.
- For auto-start on boot and restart-on-crash, consider using pm2 or systemd for both the Node server and ngrok.
